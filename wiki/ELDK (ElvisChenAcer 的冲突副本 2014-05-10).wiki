Embedded Linux Development Kits
[[http://www.denx.de/wiki/view/ELDK-5/WebHome |ELDK手册]]

嵌入式Linux开发工具套件(ELDK)包括GNU交叉开发工具，如编译器、binutils、gdb等工具，和一些已经编译好的目标工具以及负责提供在目标平台上函数调用的库文件。还免费提供了所有的源代码，包括全部补丁、扩展文件、以及用于编译开发工具使用的程序和脚本。安装包都是基于RPM包管理器。


搭建 http://loosky.net/465.html

==获取ELDK==
    可以通过以下方式获得ELDK。
    ·DENX计算机系统光盘
    ·从以下服务器中下载
        FTP方式
           ftp://mirror.switch.ch/mirror/eldk/eldk/            
           ftp://sunsite.utk.edu/pub/linux/eldk/ 
           ftp://ftp.sunet.se/pub/Linux/distributions/eldk/ 
           ftp://ftp.leo.org/pub/eldk/
        HTTP方式 
           http://mirror.switch.ch/ftp/mirror/eldk/eldk/
           http://ftp.sunet.se/pub/Linux/distributions/eldk/
           http://archiv.leo.org/pub/comp/os/unix/linux/eldk/
安装命令 $ ./install [-d <dir>] [<cpu_family1>] [<cpu_family2>] ...
env：
   $ export CROSS_COMPILE=ppc_4xx-          //加入环境变量
   $ PATH=$PATH:/opt/eldk/usr/bin:/opt/eldk/bin     //加入PATH

==终端程序==
   ===kermit===
      下面是使用U-Boot和Linux时推荐配置：
         ~/.kermrc:
         set line /dev/ttyS0
         set speed 115200
         set carrier-watch off
         set handshake none
         set flow-control none
         robust
         set file type bin
         set file name lit
         set rec pack 1000
         set send pack 1000
         set window 5
      连接目标板： $ kermit -c
   ===minicom -===
   很遗憾的是，很多用户发现在使用U-Boot和Linux时，minicom有很多问题，尤其是试图使用它来下载image的时候。因此，不推荐大家使用minicom。


==配置TFTP服务器==
    使用U-Boot下载Linux内核或者应用程序的最快捷的方法是通过网络传输。为了这一目的，U-Boot实现了TFTP协议（参见U-Boot中的tftpboot命令）。为了使主机支持TFTP，你必须确保TFTP后台程序/usr/sbin/in.tftpd已经安装。在RedHat系统中，你可以运行下面的命令来确认：
    $ rpm -q tftp-server
   如果没有安装，请从你的Linux安装盘或者其它媒介安装。
   大多数的Linux发行版都默认关闭TFTP服务。以RedHat系统为例，如果要使能TFTP服务，编辑文件/etc/xinetd.d/tftp，移除这一行：
   修改disable = no
   此外，确保/tftpboot目录存在，而且有访问权限（至少应该"dr-xr-xr-x"）。
    

==Das U-Boot==
===5.1 当前版本===
Das U-Boot（简称“U-Boot”）- 针对嵌入式PowerPC, ARM, MIPS和x86处理器的开放源代码软件。
官方网站：http://www.denx.de/wiki/UBoot
U-Boot最新版的源代码
- 在Sourceforge通过匿名CVS得到。
   $ cvs -d:pserver:anonymous@www.denx.de:/cvsroot login
   $ cvs -z6 -d:pserver:anonymous@www.denx.de:/cvsroot co -P u-boot
   
- 通过FTP方式获取 ftp://ftp.denx.de/pub/u-boot/下载tar形式的压缩包。
- 通过git方式获取：
   git clone git://www.denx.de/git/u-boot.git u-boot/
   git clone http://www.denx.de/git/u-boot.git u-boot/
   git clone rsync://www.denx.de/git/u-boot.git u-boot/

===5.3 配置===
$ export BUILD_DIR=/opt/eldk/build  //指定编译的输出目录
    进入U-Boot源代码根目录后，可以先使用如下命令确保已经清除以前编译的结果：
$ make distclean
    下一步是为Makalu板配置U-Boot：
$ make makalu_config
（译者注：应该根据你自己的具体开发板配置，如$ make <yourboard>_config，如果没有相应的开发板，应该自己照着建立相应的目录和配置文件。）
    最后我们可以开始编译U-Boot了：
 $ make all
 

==6. Linux内核的编译==
===6.1 下载Linux内核===
- 通过git下载到最新的内核，命令如下：
   $ cd /opt/eldk/usr/src
   $ git clone git://www.denx.de/git/linux-2.6-denx.git linux-2.6-denx
   $ cd linux-2.6-denx
   
===6.2 内核的配置及编译===
下面的步骤需要powerpc的交叉开发工具，所以您必须确认您的PATH变量中有ELDK的编译工具的地址。

$ make mrproper 清除以前的编译信息：
$ make ARCH=powerpc CROSS_COMPILE=ppc_4xx- makalu_defconfig     //导入默认配置  导入适合Makalu开发板的默认配置，这些配置是经过官方多次测试的：
注：这些默认的配置文件位于arch/powerpc/configs/XXX_defconfig ，根据您的开发板的型号选择。如果找不到相应的配置文件，可以去arch/ppc/configs/中寻找相应的配置文件，那里还有一些。makalu_defconfig这个就是位于arch/ppc/configs/下面，而arch/powerpc/configs/中没有。

当然您还可以自己去修改内核的配置，使用如下命令：
$ make ARCH=powerpc CROSS_COMPILE=ppc_4xx- config      //手动改动配置
或者
$ make ARCH=powerpc CROSS_COMPILE=ppc_4xx- menuconfig  //手动改动配置
注：因为一些问题（尤其是老版本的内核），"make xconfig"这个命令不被推荐
使用下面的命令编译内核：
$ make ARCH=powerpc CROSS_COMPILE=ppc_4xx- uImage      //编译
编译生成的目标文件uImage是通过mkimage（位于U-Boot包中） 创建的，位于/opt/eldk/usr/src/linux-2.6-denx/arch/powerpc/boot/uImage，它可以通过U-Boot来下载和引导
配置和安装模块使用如下命令：
$ make ARCH=powerpc CROSS_COMPILE=ppc_4xx- modules
$ make ARCH=powerpc CROSS_COMPILE=ppc_4xx- INSTALL_MOD_PATH=/opt/eldk/ppc_4xx modules_install

===6.3 安装===
将文件复制到tftpboot目录下面，然后通过tftp烧写：
$ cp arch/powerpc/boot/uImage /tftpboot/uImage


==7. 根文件系统的设计与编译==
===7.1 根文件系统的设计===
嵌入式开发中根文件系统的设计并不是很容易的事，主要的问题是：
（1）里面要包括哪些内容
（2）使用哪种文件系统类型
（3）怎样存储和引导
现在假设根文件系统中的内容我们已经知道，那么我们主要关注后面两点。
我们使用ELDK安装时生成的镜像 SELF (Simple Embedded Linux Framework)，它位于 /opt/eldk/<architecture>/images/ 文件夹下，ramdisk_image.gz这个文件便是。
（1）解压ramdisk：
$ gzip -d -c -v /opt/eldk/ppc_4xx/images/ramdisk_image.gz >/tmp/ramdisk_image    //解压
（2）挂载ramdisk
$ mount -o loop /tmp/ramdisk_image /mnt/tmp                                      //挂载
（3）创建压缩文件，为了避免下面步骤需要root权限，不包括设备文件
$ cd /mnt/tmp
$ tar -zc --exclude='dev/*' -f /tmp/rootfs.tar.gz *                            //创建tarball，为了避免下面步骤需要root权限，不包括设备文件
（4）将设备文件创建成单独的压缩文件（使用cramfs）
$ tar -zcf /tmp/devices.tar.gz dev/                //将设备文件创建成单独的tarball
$ cd /tmp
（5）取消挂载
$ umount /mnt/tmp               //取消挂载
7.2 根文件系统的编译
我们使用ramdisk的形式来生成根文件系统的镜像文件，一般情况下，它使用ext2文件系统。
（1）创建目录，解压压缩文件
$ cd /opt/eldk/
$ mkdir rootfs
$ cd rootfs
$ tar zxf /tmp/rootfs.tar.gz
（2）我们使用genext2fs来创建ramdisk镜像文件，因为它使用一个简单的文本文件来描述设备，因而不需要root权限。使用设备表rootfs_devices.tab：
#<name> <type> <mode> <uid> <gid> <major> <minor> <start> <inc> <count>
/dev d 755 0 0 - - - - -
/dev/console c 640 0 0 5 1 - - -
/dev/fb0 c 640 0 0 29 0 - - -
/dev/full c 640 0 0 1 7 - - -
/dev/hda b 640 0 0 3 0 - - -
/dev/hda b 640 0 0 3 1 1 1 16
/dev/kmem c 640 0 0 1 2 - - -
/dev/mem c 640 0 0 1 1 - - -
/dev/mtd c 640 0 0 90 0 0 2 16
/dev/mtdblock b 640 0 0 31 0 0 1 16
/dev/mtdr c 640 0 0 90 1 0 2 16
/dev/nftla b 640 0 0 93 0 - - -
/dev/nftla b 640 0 0 93 1 1 1 8
/dev/nftlb b 640 0 0 93 16 - - -
/dev/nftlb b 640 0 0 93 17 1 1 8
/dev/null c 640 0 0 1 3 - - -
/dev/ptyp c 640 0 0 2 0 0 1 10
/dev/ptypa c 640 0 0 2 10 - - -
/dev/ptypb c 640 0 0 2 11 - - -
/dev/ptypc c 640 0 0 2 12 - - -
/dev/ptypd c 640 0 0 2 13 - - -
/dev/ptype c 640 0 0 2 14 - - -
/dev/ptypf c 640 0 0 2 15 - - -
/dev/ram b 640 0 0 1 0 0 1 2
/dev/ram b 640 0 0 1 1 - - -
/dev/rtc c 640 0 0 10 135 - - -
/dev/tty c 640 0 0 4 0 0 1 4
/dev/tty c 640 0 0 5 0 - - -
/dev/ttyS c 640 0 0 4 64 0 1 8
/dev/ttyp c 640 0 0 3 0 0 1 10
/dev/ttypa c 640 0 0 3 10 - - -
/dev/ttypb c 640 0 0 3 11 - - -
/dev/ttypc c 640 0 0 3 12 - - -
/dev/ttypd c 640 0 0 3 13 - - -
/dev/ttype c 640 0 0 3 14 - - -
/dev/ttypf c 640 0 0 3 15 - - -
/dev/zero c 640 0 0 1 5 - - -
具体的格式描述请参见genext2fs的帮助文档。

（3）使用genext2fs来创建一个ext2文件系统的镜像：
$ ROOTFS_DIR=/opt/eldk/rootfs # 路径
$ ROOTFS_SIZE=8192 # 文件系统镜像的大小，如果此值太小，当生成的文件超过此值时，会报错
$ ROOTFS_FREE=100 # free space wanted
$ ROOTFS_INODES=380 # number of inodes
$ ROOTFS_DEVICES=rootfs_devices.tab # device description file
$ ROOTFS_IMAGE=ramdisk.img # generated file system image
$ genext2fs -U \
-d ${ROOTFS_DIR} \
-D ${ROOTFS_DEVICES} \
-b ${ROOTFS_SIZE} \
-r ${ROOTFS_FREE} \
-i ${ROOTFS_INODES} \
${ROOTFS_IMAGE}

（4）压缩文件
$ gzip -v9 ramdisk.img

（5）创建适合U-Boot的images：
$ mkimage -T ramdisk -C gzip -n 'Test Ramdisk Image' \>
  -d ramdisk.img.gz uRamdisk

至此，ELDK的开发环境便基本搭建完成。
