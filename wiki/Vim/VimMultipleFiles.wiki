:help quickfix
==Operate command over multiple files==
:argdo %s/foo/bar/
:bufdo %s/foo/bar/
:windo %s/foo/bar/
:tabdo %s/foo/bar/

==多文件中查找==
对于多文件中的查找来说，比较容易，vimgrep是vim自带的一个工具，类似于grep的用法就可以实现

:vimgrep word *    在当前目录查找word，使用如下：
:vimgrep word **   递归查找所有下级目录里面，那么就用

另外，如果想要在使用是快捷查找当前光标下的字母，则只需要在vimrc中添加如下代码：

"对搜索的设置
map ft :call Search_Word()<CR>:copen<CR>
function Search_Word()
   let w = expand("<cword>") " 在当前光标位置抓词
   execute "vimgrep " w " *"
endfunction

通过vimgrep查找到的结果会生成到quickfix中，



VimCommand


==第二，多文件替换。==
   ===1. 使用quickfix 的文件list，一个命题替换===
		Useful application: Find pattern matches in multiple files and
		do something with them: >
		
			:vimgrep /theword/jg *.c
			
			:for d in getqflist()
			:   echo bufname(d.bufnr) ':' d.lnum '=' d.text
			:endfor


===2. 实际上只要如下两个命令即可（假设要将当前目录下所有扩展名为.txt的文件中的hate替换成love）:===
:args *.txt
:argdo %s/hate/love/gc | update
就可以完成啦。解释如下，
:args *.txt    这样写会扫描当前目录下的.txt文件，并加入到参数列表。
:args **/*.txt 递归扫描所有下级目录的话
:args */*.txt  只扫描下一级目录（即不扫描当前目录）
:argdo %s/hate/love/gc | update 将参数列表中的所有文件的hate提换成love，并写入硬盘（如果没有|update，就不会写入，但相应的替换也会被中断）

最后强调一点，使用替换命令的时候，一定记得备份，因为替换是直接写入硬盘滴哦……


==search in multiple files ==
VimCommand


