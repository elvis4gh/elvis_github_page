==\v (very magic) reduces backslashing==
Vim traps: In regular expressions you must backslash + (match 1 or more).

/codes\(\n\|\s\)*where : normal regexp
/\vcodes(\n|\s)*where  : very magic

=子模式=
在正规表达式中使用 \( 和 \) 符号括起正规表达式，即可在后面使用\1、\2等变量来访问 \( 和 \) 中的内容。
example:
   ===•将 data1 data2 修改为 data2 data1===
   :s/\(\w\+\)\s\+\(\w\+\)/\2\t\1
   ===•将 Doe, John 修改为 John Doe===
   :%s/\(\w\+\), \(\w\+\)/\2 \1/    
   
   
==\<，\>，表示单词的起始，结束==
要查找单词hi，要用 \<hi\>
==\{1,}   1或更多，同 \+ ==
==\d\+    1个或更多连续的数字==
==\{0,1}  0或1，   同 \= ==
\(\=0\d\{2}[) -]\=\d\{8}  这个表达式可以匹配几种格式的电话号码
\<\(\w\+\)\s\+\1\> 可以用来匹配重复的单词
\<\w\+\(ing\)\@=   Vim称为：零宽度匹配前面的匹配原
==\|  "或"运算符==
	

\(\<re\)\@<=\w\+   零宽度反向匹配。要求前面的匹配原紧贴在后面的模式之前匹配
\(\=0\d\{2}[) -]\=\d\{8}
   

# Vim 正则 
vim Perl 意义
\@= (?= 顺序环视
\@! (?! 顺序否定环视
\@<= (?<= 逆序环视
\@<! (?<! 逆序否定环视
\@> (?> 固化分组
\%(atom\) (?: 非捕获型括号

e.g
# Perl的写法
/(?<=foo)bar/

# vim的写法
/\(foo\)\@<=bar

# pattern
# 译释： :g/{pattern}/{cmd} 就是全局找到匹配的行
/^/匹配文件的所有行（这是查找的一个常用技巧
/./匹配非空行

中文汉字的正则表达式 
[^\x00-\xff]

==有没有写vim正则的plugin？==

==把文本中的所有数字，从右到左，每三位加一个逗号，==
用vim的正则表达式实现如下功能： 
如     a number in text 1234567 and another number 1234
替换成 a number in text 1,234,567 and another number 1,234

:%s/\([0-9]\)\@<=\([0-9]\{3\}\)\(\([0-9]\{3\}\)*\([^0-9]\|$\)\)\@=/,&/g 
    \([0-9]\)\@<=                                                                      逆序环视。匹配一个空隙，但是这个空隙前面应该是一个数字
                 \([0-9]\{3\}\)                                                        这里应该有三个数字
                               \(\([0-9]\{3\}\)*\([^0-9]\|$\)\)\@=                     顺序环视。
                                (\([0-9]\{3\}\)*                                       表示的是零个或者是3的倍数个数字，
                                                \([^0-9]\|$\)\)                        表示的是一个非数字或者行的结束，
                                                               \@=                     蓝色部分匹配的是一个空隙，空隙在3的整数个数字之前。
                                                                   ,&                  其中逗号就是表示逗号， &表示的是匹配到的模式
                                                                   
