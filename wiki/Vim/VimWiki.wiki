:h vimwiki-options

VimWikiTemplate

==生成HTML?==
:Vimwiki2HTML 可以为当前维基条目生成HTML文件
:VimwikiAll2HTML 可以为所有条目生成HTML 
您可以为每个维基项目指定 auto_export 选项，这样在wiki文件保存时就会自动生成HTML。个人不建议这样做，因为当条目很大，保存就相当费时。

定义下面的快捷键映射即可：
    map <S-F4> :VimwikiAll2HTML<cr>
    map <F4> :Vimwiki2HTML<cr> 

=多个维基项目=
您可以配置 g:vimwiki_list，指定多个维基项目，它们各自拥有单独的文件夹。这就允许你把工作维基和生活的琐事记录完全分开。
请打开 vimrc ，加入以下内容：
let g:vimwiki_list = [{'path': 'E:/path/to/vimwiki-1/vimwiki/',  
  \ 'path_html': 'E:/My Dropbox/vimwiki_html/'
  \ 'html_header': 'E:/My Dropbox/Public/vimwiki_template/header.htm',
  \ 'html_footer': 'E:/My Dropbox/Public/vimwiki_template/footer.htm',
  \ 'diary_link_count': 5},
  \{'path': 'Z:/path/to/vimwiki-2/vimwiki/'}]
这里其实定义了两个维基项目。
   path 是必须的，说明你想要把 wiki 条目存在哪个目录。其他选项各有默认值。
   path_html 生成的HTML存放在 path_html 下, 默认是与 path 同目录下的 WIKIFOLDER_html ，其中 WIKIFOLER 是你存放维基条目的文件夹名。
   你可以分别为每个 wiki 项目指定 html 头部和尾部模板，建议把模板文件后缀采用 htm ，既和生成的 html 有所区分，又能保证语法高亮和各种 ftplugin 可用。 
   diary_link_count 是指 diary.wiki 里每行放多少个日志链接。

定义好之后，你可以使用 <leader>ws 选择当前活动的维基项目。使用 <leader>ws 会弹出一个维基项目的列表，并带有编号，使用这个编号加上“快捷键总览”部分的快捷键，就可以打开相应项目的首页、日记等。如 2<leader>w<leader>w 就是在当前窗口打开列表中第二个项目的日记。

更多选项请参考 :h viwmiki-local-options 

==Search Wiki==
直接使用 :VimwikiSearch key 命令或者：
:vimgrep /KEY/ %:p:h/*.wiki

  
==Link image/webside image/...??==
Link with description: >
 [http://habamax.ru/blog habamax home page]
 
http://vimwiki.googlecode.com/hg/screenshots/vimwiki3.png

Link to a local image: >
   [[../images/DscBasedVirtualSoftHandoffCallp.JPG]]
http://code.google.com/p/vimwiki/


[[Wiki]]

--------

==编写一个语法模式==
现在我们尝试写一个我们自己的语法文件，它针对于 AmiFormat 文本格式。
语法高亮最基本的就是循环执行两个步骤－其一就是定义我们搜索的文本模式；其二就是定义如何显示。
比如我们要找到所有 <b>any word</b> 这种模式，并将其作为黑体加粗显示。 首先我们需要在文本中比配这个模式，然后将这个模式和显示模式绑定，以便我们之后显示：
:syntax match ourBold /&lt;b&gt;.*&lt;/b&gt;/ 
:highlight default ourBold term=bold cterm=bold gui=bold
第一行是要基于某个匹配模式新建一个语法，我们将其命名为ourBold,正则表达式生命如上。
第二行我们要高亮显示上边的ourBold语法。我们生命的模式是一种默认的模式，也就是说用户或是其他显示模式可以覆盖掉他。我们可以声明三种不同的方式来表示ourBold，并且以这三种模式在vim中显示－黑白终端，彩色终端和GUI。
有些时候，我们想在文本中写入一些任务列表作为我们的todo列表，为了更加醒目，通常要将TODO大写，但是我们相让他更加醒目的要如何呢？
:syntax keyword ourTodo TODO FIXME XXX :hi def link ourTodo Todo
首先我们定义’ourTodo’关键字，这是需要高亮显示的简单的文本，我们将这个模式绑定到已经在vim中存在的Todo组。 在vim中有好多已经提前定义好的颜色模式。将我们的语法风格绑定到已经存在的语法风格上是再好不过的了。 输入 :help group-name 来查看更多可用的组。
接下来，我们在闭合的

									1
								

										 ..  
									
中声明代码块，那我们该如何高亮显示呢？
:syn region amiCode excludenl start=/[code]/ end=/[/code]/ :hi def link amiCode Identifier
首先我们定义一个以开始模式和结束模式包围的文本区域（在我们的例子中很简单），然后绑定到已经存在的模式（Identifier）上。
相同道理，我们将文本其他部分的定义添加到以定义的AmiFormat reference, 最后的脚本差不多是这个样子：
" Vim syntax file for AmiFormat " Language: AmiFormat " Version: 1 " Last Change: 2006-12-28 Thu " Maintainer: www.swaroopch.com/contact/ " License: www.opensource.org/licenses/bsd-license.php " Reference: http://orangoo.com/labs/AmiNation/AmiFormat/  """""""""" Initial Checks """"""""""""""""""""""""""""""""""""""""""""  " To be compatible with Vim 5.8. See `:help 44.12` if version < 600 syntax clear elseif exists("b:current_syntax")  " Quit when a (custom) syntax file was already loaded finish endif  """""""""" Patterns """"""""""""""""""""""""""""""""""""""""""""""""""  " Emphasis syn match amiItalic /&lt;i&gt;.{-}</i>/ syn match amiBold /&lt;b&gt;.{-}</b>/  " Todo syn keyword amiTodo TODO FIXME XXX  " Headings syn match amiHeading /^h[1-6].s+.{-}$/  " Lists syn match amiList /^s**s+/ syn match amiList /^s*d+.s+/  " Classes syn match amiClass /^s*%(w+).*%/ syn match amiClass /^s*%{.*}.*%/  " Code syn region amiCode excludenl start=/[code]/ end=/[/code]/  " HTML syn region amiEscape excludenl start=/[escape]/ end=/[/escape]/  " Link syn match amiLink /".{-}":(.{-})/  " Image syn match amiImage /!.{-}(.{-})!/  """""""""" Highlighting """""""""""""""""""""""""""""""""""""""""""""" hi def amiItalic term=italic cterm=italic gui=italic
hi def amiBold term=bold cterm=bold gui=bold

hi def link amiHeading Title
hi def link amiTodo Todo
hi def link amiList PreProc
hi def link amiClass Statement
hi def link amiCode Identifier
hi def link amiEscape Comment
hi def link amiLink String
hi def link amiImage String  """""""""" Finish """"""""""""""""""""""""""""""""""""""""""""""""""""  " Set syntax name let b:current_syntax = "amifmt"
现在这个脚本可以很好的工作了，而且我已经将他上传到了 Vim scripts section 因为这个是我写的:）现在全世界所有的人都可以使用我写的语法高亮的脚本了。
想要了解更多关于语法高亮的内容，参考：
:help syntax
:help usr_44.txt
:help group-name
:help pattern-overview
:help mysyntaxfile
:help new-filetype
注意 以防万一某个语法文件将显示弄乱，你可以按 CTRL-L 来刷新屏幕回到之前的显示。 注意 你可能已经猜到了，当我们之前设置文件类型 filetype 的时候， vim自动使用相同文件名的 syntax 文件。

